<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">

    <!--  此文件叫做spring-dao.xml 或者叫做 applicationContext.xml
    此处的spring-dao和spring-service可以内容合并起来，叫做applicationContext
    -->


    <!-- 配置整合mybatis过程 -->
    <!-- 1.加载properties文件 -->
    <!-- <context:property-placeholder location="classpath:jdbc.properties"/>-->
    <!-- or -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties"/>
    </bean>

    <!-- 2.数据库连接池. 配置数据源 -->
    <!--
    或者使用
    pom.xml中的 连接池设置
    <dependency>
        <groupId>com.alibaba</groupId>
        <artifactId>druid</artifactId>
        <version>${druid.version}</version>
    </dependency>


    此时的dataSource如下书写
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
    </bean>


    jdbc.properties应该写作

    driver=com.mysql.jdbc.Driver
    url=jdbc:mysql://localhost:3306/test?characterEncoding=utf8&useSSL=false
    username=root
    password=cheetah2019
    initialSize=0
    maxActive=20
    maxIdle=20
    minIdle=1
    maxWait=60000
    -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!-- 配置连接池属性 -->
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- c3p0连接池的私有属性 -->
        <property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>
        <property name="minPoolSize" value="${jdbc.minPoolSize}"/>
        <!-- 关闭连接后不自动commit -->
        <property name="autoCommitOnClose" value="${jdbc.autoCommitOnClose}"/>
        <!-- 获取连接超时时间 -->
        <property name="checkoutTimeout" value="${jdbc.checkoutTimeout}"/>
        <!-- 当获取连接失败重试次数 -->
        <property name="acquireRetryAttempts" value="${jdbc.acquireRetryAttempts}"/>
    </bean>

    <!-- 3.配置SqlSessionFactory对象 -->
    <!-- mybatis和spring完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 配置MyBatis全局配置文件:mybatis-config.xml -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- 扫描entity/model包 使用别名 -->
        <property name="typeAliasesPackage" value="com.sunlab.helloworld.entity"/>
        <!-- 扫描sql配置文件:mapper需要的xml文件. [多个mapper locations时的路径配置]-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
    <!-- Mapper动态代理开发，扫描dao接口包-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 给出需要扫描Dao接口包 -->
        <property name="basePackage" value="com.sunlab.helloworld.dao"/>
    </bean>

    <!--
    事务管理， 数据库连接池

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    -->
</beans>